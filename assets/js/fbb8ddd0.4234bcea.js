"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[669],{5765:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"getting-started/spring-data-jpa","title":"Spring Data JPA","description":"Suppose you have the Book entity using Spring Boot Data JPA.","source":"@site/docs/getting-started/spring-data-jpa.md","sourceDirName":"getting-started","slug":"/getting-started/spring-data-jpa","permalink":"/criteria/getting-started/spring-data-jpa","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/spring-data-jpa.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/criteria/getting-started/"},"next":{"title":"MongoDB","permalink":"/criteria/getting-started/mongodb"}}');var i=n(4848),o=n(8453);const r={},s="Spring Data JPA",l={},d=[{value:"How to add joins on criteria <a></a>",id:"how-to-add-joins-on-criteria-",level:3}];function c(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"spring-data-jpa",children:"Spring Data JPA"})}),"\n",(0,i.jsx)(t.p,{children:"Suppose you have the Book entity using Spring Boot Data JPA."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:"@Entity\nclass Book(\n    @Id\n    val id: Int,\n    val title: String,\n    val author: String\n)\n"})}),"\n",(0,i.jsx)(t.p,{children:"And you need to filter by the author and the title. You can create an instance of the Criteria class and define the filters with the values."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'val criteria = Criteria(\n    filters = listOf(\n        Filter("title", "Kotlin", FilterOperator.CONTAINS),\n        Filter("author", "Svetlana Isakova", FilterOperator.EQUALS)\n    )\n)\n'})}),"\n",(0,i.jsx)(t.p,{children:'This instance of the Criteria class will filter by books with title that contains the "Kotlin" word and by the author "Svetlana Isakova"'}),"\n",(0,i.jsxs)(t.p,{children:["To perform a query using this criteria you will need to implement on our JPA Repository the ",(0,i.jsx)(t.code,{children:"JpaSpecificationExecutor<T>"})," interface for allow to execute queries through the spring ",(0,i.jsx)(t.code,{children:"Specification<T>"})," interface."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:"@Repository\ninterface BookRepository : CrudRepository<Book, Long>, JpaSpecificationExecutor<Book>\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Now we can autowire ",(0,i.jsx)(t.code,{children:"BookRepository"})," and execute the query with our ",(0,i.jsx)(t.code,{children:"criteria"})," instance."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:"@Autowired\nlateinit var bookRepository: BookRepository\n\nval adapter = CriteriaJPASpecificationAdapter()\nval result = adapter.apply(criteria, bookRepository)\n// The result variable contains the collection of Book instances\n"})}),"\n",(0,i.jsxs)(t.h3,{id:"how-to-add-joins-on-criteria-",children:["How to add joins on criteria ",(0,i.jsx)("a",{href:"#how-to-add-joins-on-criteria",id:"how-to-add-joins-on-criteria"})]}),"\n",(0,i.jsxs)(t.p,{children:["Now imagine you have the ",(0,i.jsx)(t.code,{children:"BookAuthor"})," entity that is related with the ",(0,i.jsx)(t.code,{children:"Book"})," entity with a ",(0,i.jsx)(t.code,{children:"OneToMany"})," relationship"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'@Entity\nclass Book(\n    //...\n    @ManyToOne\n    @JoinColumn(name = "author_id")\n    var author: BookAuthor,\n)\n\n@Entity\nclass BookAuthor(\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    var id: Long? = null,\n    var name: String,\n    val birthDate: Instant,\n\n    @OneToMany(mappedBy = "author")\n    val books: MutableList<Book> = mutableListOf(),\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["We can add a join from the ",(0,i.jsx)(t.code,{children:"Book"})," entity to ",(0,i.jsx)(t.code,{children:"BookAuthor"})," entity for create a criteria that filters by the author name. For this we need to create a join map."]}),"\n",(0,i.jsxs)(t.p,{children:["The join map is simple, you need to define a ",(0,i.jsx)(t.code,{children:"Map"})," with a key that is the relation name and as value the join definition."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'mapOf(\n    "<relation name>" to join<Book, BookAuthor>("<property that has the relation on Book entity>", JoinType.INNER) // The join definition\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["As the last example we need to call the ",(0,i.jsx)(t.code,{children:"adapt"})," method from ",(0,i.jsx)(t.code,{children:"CriteriaJPASpecificationAdapter"})," and add the join map on the ",(0,i.jsx)(t.code,{children:"adapt"})," method"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'@Autowired\nlateinit var bookRepository: BookRepository\n\nval criteria = Criteria(\n    filters = listOf(\n        // We use the relation notation as filter name, first the relation name defined\n        // as the key on the join map and the related field name before the "."\n        // NOTE: the related field name is a property name of BookAuthor entity\n        Filter("author.name", "Svetlana Isakova", FilterOperator.EQUALS)\n    )\n)\n\nval adapter = CriteriaJPASpecificationAdapter()\nval result = adapter.apply(criteria, bookRepository) {\n    mapOf(\n        "author" to join<Book, BookAuthor>("author", JoinType.INNER)\n    )\n}\n// The result variable contains the collection of filtered Book instances\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If you have a ",(0,i.jsx)(t.code,{children:"FieldMap"})," you can add it into the ",(0,i.jsx)(t.code,{children:"CriteriaJPASpecificationAdapter"})," constructor."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'val fieldMap = mapOf(\n    // this will indicate the field author_name points to author.name related field\n    "author_name" to "author.name"\n)\n// ...\nval adapter = CriteriaJPASpecificationAdapter(fieldMap)\nval result = adapter.apply(criteria, bookRepository)\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(6540);const i={},o=a.createContext(i);function r(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);